buildscript {
    ext.safeExtGet = {prop, fallback ->
        rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
    }
    repositories {
        google()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        // Matches recent template from React Native (0.60)
        // https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle#L16
        classpath("com.android.tools.build:gradle:${safeExtGet('gradlePluginVersion', '3.5.0')}")
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.50"
    }
}

apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


// Matches values in recent template from React Native 0.59 / 0.60
// https://github.com/facebook/react-native/blob/0.59-stable/template/android/build.gradle#L5-L9
// https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle#L5-L9
def DEFAULT_COMPILE_SDK_VERSION = 29
def DEFAULT_MIN_SDK_VERSION = 21
def DEFAULT_TARGET_SDK_VERSION = 29

android {
  compileSdkVersion safeExtGet('compileSdkVersion', DEFAULT_COMPILE_SDK_VERSION)

  defaultConfig {
    minSdkVersion safeExtGet('minSdkVersion', DEFAULT_MIN_SDK_VERSION)
    targetSdkVersion safeExtGet('targetSdkVersion', DEFAULT_TARGET_SDK_VERSION)
    versionCode 1
    versionName "1.0"
  }
  lintOptions {
    abortOnError false
  }
}

allprojects {
    repositories {
        maven {
            // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm
            // Matches recent template from React Native 0.59 / 0.60
            // https://github.com/facebook/react-native/blob/0.59-stable/template/android/build.gradle#L30
            // https://github.com/facebook/react-native/blob/0.60-stable/template/android/build.gradle#L28
            url "$projectDir/../node_modules/react-native/android"
        }
        mavenCentral()
        maven { url 'https://jitpack.io' }
        jcenter()
        google()
    }
}

dependencies {
    implementation "com.facebook.react:react-native:${safeExtGet('reactnativeVersion', '+')}"
    implementation "com.squareup.okhttp3:okhttp-urlconnection:4.0.1"
    implementation "com.proximipro:engage-android:1.1.0-alpha1"
    implementation "androidx.appcompat:appcompat:1.0.2"
    implementation "org.altbeacon:android-beacon-library:2.16.3"
    implementation "androidx.work:work-runtime-ktx:2.2.0"
    implementation 'com.google.code.gson:gson:2.8.6'
}

def configureReactNativePom(def pom) {
    def packageJson = new groovy.json.JsonSlurper().parseText(file('../package.json').text)

    pom.project {
        name packageJson.title
        artifactId packageJson.name
        version = packageJson.version
        group = "com.reactlibrary"
        description packageJson.description
        url packageJson.repository.baseUrl

        licenses {
            license {
                name packageJson.license
                url packageJson.repository.baseUrl + '/blob/master/' + packageJson.licenseFilename
                distribution 'repo'
            }
        }

        developers {
            developer {
                id packageJson.author.username
                name packageJson.author.name
            }
        }
    }
}

afterEvaluate { project ->

    task androidJavadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        classpath += files(project.getConfigurations().getByName('compile').asList())
        include '**/*.java'
    }

    task androidJavadocJar(type: Jar, dependsOn: androidJavadoc) {
        classifier = 'javadoc'
        from androidJavadoc.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
        include '**/*.java'
    }

    android.libraryVariants.all { variant ->
        def name = variant.name.capitalize()
        task "jar${name}"(type: Jar, dependsOn: variant.javaCompile) {
            from variant.javaCompile.destinationDir
        }
    }

    artifacts {
        archives androidSourcesJar
        archives androidJavadocJar
    }

    task installArchives(type: Upload) {
        configuration = configurations.archives
        repositories.mavenDeployer {
            // Deploy to react-native-event-bridge/maven, ready to publish to npm
            repository url: "file://${projectDir}/../android/maven"

            configureReactNativePom pom
        }
    }
}
